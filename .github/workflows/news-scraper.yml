name: News Scraper

on:
  schedule:
    # Executa às 7:00 UTC (4:00 AM BRT) e 19:00 UTC (4:00 PM BRT)
    # Ajustado para 10:00 UTC (7:00 AM BRT) e 22:00 UTC (7:00 PM BRT)
    - cron: '0 10,22 * * *'
  workflow_dispatch: # Permite execução manual

permissions:
  contents: write

jobs:
  scrape-news:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: true
        ref: main
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install supabase python-dotenv
        echo "✅ Dependencies installed"

    - name: Environment diagnostics
      env:
        # Prefer secrets; fall back to repository variables if secrets are not set
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_SUPABASE_URL_VAR: ${{ vars.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY_VAR: ${{ vars.VITE_SUPABASE_ANON_KEY }}
        NEWS_SOURCES_ALLOWLIST: ${{ secrets.NEWS_SOURCES_ALLOWLIST }}
        NEWS_SOURCES_ALLOWLIST_VAR: ${{ vars.NEWS_SOURCES_ALLOWLIST }}
      run: |
        python --version
        pip list | sed -n '1,50p'
        echo "Repo root contents:" && ls -la
        echo "Scripts dir contents:" && ls -la scripts || true
        if [ -n "$VITE_SUPABASE_URL" ]; then echo "🔒 Supabase URL secret: PRESENT"; else echo "⚠️ Supabase URL secret: MISSING"; fi
        if [ -n "$VITE_SUPABASE_ANON_KEY" ]; then echo "🔒 Supabase ANON KEY secret: PRESENT"; else echo "⚠️ Supabase ANON KEY secret: MISSING"; fi
        if [ -n "$VITE_SUPABASE_URL_VAR" ]; then echo "ℹ️ Supabase URL variable: PRESENT"; else echo "ℹ️ Supabase URL variable: MISSING"; fi
        if [ -n "$VITE_SUPABASE_ANON_KEY_VAR" ]; then echo "ℹ️ Supabase ANON KEY variable: PRESENT"; else echo "ℹ️ Supabase ANON KEY variable: MISSING"; fi
        if [ -n "$NEWS_SOURCES_ALLOWLIST" ]; then echo "🔒 Allowlist secret: PRESENT"; else echo "ℹ️ Allowlist secret: MISSING"; fi
        if [ -n "$NEWS_SOURCES_ALLOWLIST_VAR" ]; then echo "ℹ️ Allowlist variable: PRESENT"; else echo "ℹ️ Allowlist variable: MISSING"; fi
        # Export fallbacks so subsequent steps have them available
        export VITE_SUPABASE_URL="${VITE_SUPABASE_URL:-$VITE_SUPABASE_URL_VAR}"
        export VITE_SUPABASE_ANON_KEY="${VITE_SUPABASE_ANON_KEY:-$VITE_SUPABASE_ANON_KEY_VAR}"
        export NEWS_SOURCES_ALLOWLIST="${NEWS_SOURCES_ALLOWLIST:-$NEWS_SOURCES_ALLOWLIST_VAR}"
        # Show summary (without revealing secrets)
        if [ -n "$VITE_SUPABASE_URL" ]; then echo "✅ Using Supabase URL (length $(echo -n "$VITE_SUPABASE_URL" | wc -c))"; else echo "❌ Supabase URL not set"; fi
        if [ -n "$VITE_SUPABASE_ANON_KEY" ]; then echo "✅ Using Supabase ANON KEY (length $(echo -n "$VITE_SUPABASE_ANON_KEY" | wc -c))"; else echo "❌ Supabase ANON KEY not set"; fi
        if [ -n "$NEWS_SOURCES_ALLOWLIST" ]; then echo "✅ Using NEWS_SOURCES_ALLOWLIST"; else echo "ℹ️ NEWS_SOURCES_ALLOWLIST not set (defaults applied)"; fi
        
    - name: Run news scraper (capture logs)
      env:
        # Prefer secrets; allow fallback to repo variables
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_SUPABASE_URL_VAR: ${{ vars.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY_VAR: ${{ vars.VITE_SUPABASE_ANON_KEY }}
        NEWS_SOURCES_ALLOWLIST: ${{ secrets.NEWS_SOURCES_ALLOWLIST }}
        NEWS_SOURCES_ALLOWLIST_VAR: ${{ vars.NEWS_SOURCES_ALLOWLIST }}
      run: |
        set -o pipefail
        cd scripts
        export VITE_SUPABASE_URL="${VITE_SUPABASE_URL:-$VITE_SUPABASE_URL_VAR}"
        export VITE_SUPABASE_ANON_KEY="${VITE_SUPABASE_ANON_KEY:-$VITE_SUPABASE_ANON_KEY_VAR}"
        export NEWS_SOURCES_ALLOWLIST="${NEWS_SOURCES_ALLOWLIST:-$NEWS_SOURCES_ALLOWLIST_VAR}"
        python news_scraper.py 2>&1 | tee ../scraper_run.log

    - name: Upload scraper logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scraper-logs-${{ github.run_id }}
        path: scraper_run.log
        retention-days: 7
        
    - name: Commit and push if changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git fetch origin main
        git checkout -B main
        git add src/data/christian_news.json
        git add public/data/christian_news.json || true
        if ! git diff --staged --quiet; then
          git commit -m "chore: update news data - $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git HEAD:main
        else
          echo "No changes to commit."
        fi